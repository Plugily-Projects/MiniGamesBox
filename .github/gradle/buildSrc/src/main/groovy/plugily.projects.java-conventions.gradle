/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "papermc"
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'

        // As of Gradle 5.1, you can limit this to only those
        // dependencies you expect from it
        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }

    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }

    // mavenLocal() // This is needed for CraftBukkit and Spigot.

    maven {
        url = uri('https://maven.plugily.xyz/releases')
    }

    maven {
        url = uri('https://simonsator.de/repo/')
    }

    maven {
        url = uri('https://repo.alessiodp.com/releases/')
    }

    maven {
        url = uri('https://repo.extendedclip.com/releases/')
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.3-R0.1-SNAPSHOT")
    compileOnly 'org.spigotmc:spigot-api:1.8.8-R0.1-SNAPSHOT'
    compileOnly 'org.jetbrains:annotations:23.0.0'
}

java {
    withJavadocJar()
}

javadoc {
    options.encoding = 'UTF-8'
}

publishing {
    repositories {
        maven {
            name = "Releases"
            url = "https://maven.plugily.xyz/releases"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "Snapshots"
            url = uri("https://maven.plugily.xyz/snapshots")
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
    publications {
        maven(MavenPublication) {
            from components.java
            if (project.tasks.findByName("shadowJar") != null) {
                artifact tasks.shadowJar
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
